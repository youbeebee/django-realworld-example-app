{
  "info":{
    "_postman_id":"0574ad8a-a525-43ae-8e1e-5fd9756037f4",
    "name":"Conduit",
    "description":"Collection for testing the Conduit API\n\nhttps://github.com/gothinkster/realworld",
    "schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item":[
    {
      "name":"Auth",
      "item":[
        {
          "name":"Register",
          "event":[
            {
              "listen":"test",
              "script":{
                "type":"text/javascript",
                "exec":[
                  "if (!(environment.isIntegrationTest)) {",
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request":{
            "method":"POST",
            "header":[
              {
                "key":"Content-Type",
                "value":"application/json"
              },
              {
                "key":"X-Requested-With",
                "value":"XMLHttpRequest"
              }
            ],
            "body":{
              "mode":"raw",
              "raw":"{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\", \"username\":\"{{USERNAME}}\"}}"
            },
            "url":{
              "raw":"{{APIURL}}/users",
              "host":[
                "{{APIURL}}"
              ],
              "path":[
                "users"
              ]
            }
          },
          "response":[
            
          ]
        },
        {
          "name":"Login and Remember Token",
          "event":[
            {
              "listen":"test",
              "script":{
                "id":"a7674032-bf09-4ae7-8224-4afa2fb1a9f9",
                "type":"text/javascript",
                "exec":[
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
                  "",
                  "var user = responseJSON.user || {};",
                  "",
                  "tests['User has \"email\" property'] = user.hasOwnProperty('email');",
                  "tests['User has \"username\" property'] = user.hasOwnProperty('username');",
                  "tests['User has \"token\" property'] = user.hasOwnProperty('token');",
                  "",
                  "if(tests['User has \"token\" property']){",
                  "    pm.globals.set('token', user.token);",
                  "}",
                  "",
                  "tests['Global variable \"token\" has been set'] = pm.globals.get('token') === user.token;",
                  ""
                ]
              }
            }
          ],
          "request":{
            "method":"POST",
            "header":[
              {
                "key":"Content-Type",
                "value":"application/json"
              },
              {
                "key":"X-Requested-With",
                "value":"XMLHttpRequest"
              }
            ],
            "body":{
              "mode":"raw",
              "raw":"{\"user\":{\"email\":\"{{EMAIL}}\", \"password\":\"{{PASSWORD}}\"}}"
            },
            "url":{
              "raw":"{{APIURL}}/users/login",
              "host":[
                "{{APIURL}}"
              ],
              "path":[
                "users",
                "login"
              ]
            }
          },
          "response":[
            
          ]
        }
      ]
    },
    {
      "name":"Articles, Favorite, Comments",
      "item":[
        {
          "name":"Create Article",
          "event":[
            {
              "listen":"test",
              "script":{
                "id":"e711dbf8-8065-4ba8-8b74-f1639a7d8208",
                "type":"text/javascript",
                "exec":[
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "pm.globals.set('slug', article.slug);",
                  "",
                  "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  ""
                ]
              }
            }
          ],
          "request":{
            "method":"POST",
            "header":[
              {
                "key":"Content-Type",
                "value":"application/json"
              },
              {
                "key":"X-Requested-With",
                "value":"XMLHttpRequest"
              },
              {
                "key":"Authorization",
                "value":"Token {{token}}"
              }
            ],
            "body":{
              "mode":"raw",
              "raw":"{\"article\":{\"title\":\"How to train your dragon\", \"description\":\"Ever wonder how?\", \"body\":\"Very carefully.\", \"tagList\":[\"training\", \"dragons\"]}}"
            },
            "url":{
              "raw":"{{APIURL}}/articles",
              "host":[
                "{{APIURL}}"
              ],
              "path":[
                "articles"
              ]
            }
          },
          "response":[
            
          ]
        },
        {
          "name":"Update Article",
          "event":[
            {
              "listen":"test",
              "script":{
                "type":"text/javascript",
                "exec":[
                  "if (!(environment.isIntegrationTest)) {",
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request":{
            "method":"PUT",
            "header":[
              {
                "key":"Content-Type",
                "value":"application/json"
              },
              {
                "key":"X-Requested-With",
                "value":"XMLHttpRequest"
              },
              {
                "key":"Authorization",
                "value":"Token {{token}}"
              }
            ],
            "body":{
              "mode":"raw",
              "raw":"{\"article\":{\"body\":\"With two hands\"}}"
            },
            "url":{
              "raw":"{{APIURL}}/articles/{{slug}}",
              "host":[
                "{{APIURL}}"
              ],
              "path":[
                "articles",
                "{{slug}}"
              ]
            }
          },
          "response":[
            
          ]
        },
        {
          "name":"Update Article 2",
          "event":[
            {
              "listen":"test",
              "script":{
                "type":"text/javascript",
                "exec":[
                  "if (!(environment.isIntegrationTest)) {",
                  "var responseJSON = JSON.parse(responseBody);",
                  "",
                  "tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
                  "",
                  "var article = responseJSON.article || {};",
                  "",
                  "tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
                  "tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
                  "tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
                  "tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
                  "tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.createdAt);",
                  "tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
                  "tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/.test(article.updatedAt);",
                  "tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
                  "tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
                  "tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
                  "tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
                  "tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
                  "tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
                  "tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request":{
            "method":"PUT",
            "header":[
              {
                "key":"Content-Type",
                "value":"application/json"
              },
              {
                "key":"X-Requested-With",
                "value":"XMLHttpRequest"
              },
              {
                "key":"Authorization",
                "value":"Token {{token}}"
              }
            ],
            "body":{
              "mode":"raw",
              "raw":"{\"article\":{\"body\":\"With two hands 2\"}}"
            },
            "url":{
              "raw":"{{APIURL}}/articles/{{slug}}",
              "host":[
                "{{APIURL}}"
              ],
              "path":[
                "articles",
                "{{slug}}"
              ]
            }
          },
          "response":[
            
          ]
        },
        {
          "name":"Delete Article",
          "request":{
            "method":"DELETE",
            "header":[
              {
                "key":"Content-Type",
                "value":"application/json"
              },
              {
                "key":"X-Requested-With",
                "value":"XMLHttpRequest"
              },
              {
                "key":"Authorization",
                "value":"Token {{token}}"
              }
            ],
            "body":{
              "mode":"raw",
              "raw":""
            },
            "url":{
              "raw":"{{APIURL}}/articles/{{slug}}",
              "host":[
                "{{APIURL}}"
              ],
              "path":[
                "articles",
                "{{slug}}"
              ]
            }
          },
          "response":[
            
          ]
        }
      ],
      "event":[
        {
          "listen":"prerequest",
          "script":{
            "id":"67853a4a-e972-4573-a295-dad12a46a9d7",
            "type":"text/javascript",
            "exec":[
              ""
            ]
          }
        },
        {
          "listen":"test",
          "script":{
            "id":"3057f989-15e4-484e-b8fa-a041043d0ac0",
            "type":"text/javascript",
            "exec":[
              ""
            ]
          }
        }
      ]
    },
    {
      "name":"History",
      "item":[
        {
          "name":"All Histories",
          "event":[
            {
              "listen":"test",
              "script":{
                "type":"text/javascript",
                "exec":[
                  "var is200Response = responseCode.code === 200;",
                  "",
                  "tests['Response code is 200 OK'] = is200Response;",
                  "",
                  "if(is200Response){",
                  "    var responseJSON = JSON.parse(responseBody);",
                  "    ",
                  "    tests['Response contains \"results\" property'] = responseJSON.hasOwnProperty('results');",
                  "    var results = responseJSON.results[0] || {};",
                  "    tests['Result contains \"author\" property'] = results.hasOwnProperty('author');",
                  "    tests['Result contains \"req\" property'] = results.hasOwnProperty('req');",
                  "    tests['Result contains \"title\" property'] = results.hasOwnProperty('title');",
                  "    tests['Result contains \"body\" property'] = results.hasOwnProperty('body');",
                  "    tests['Result contains \"time\" property'] = results.hasOwnProperty('time');",
                  "    ",
                  "    console.log(responseBody)",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request":{
            "method":"GET",
            "header":[
              {
                "key":"Content-Type",
                "value":"application/json"
              },
              {
                "key":"X-Requested-With",
                "value":"XMLHttpRequest"
              },
              {
                "key":"Authorization",
                "value":"Token {{token}}"
              }
            ],
            "body":{
              "mode":"raw",
              "raw":""
            },
            "url":{
              "raw":"{{APIURL}}/history",
              "host":[
                "{{APIURL}}"
              ],
              "path":[
                "history"
              ]
            }
          },
          "response":[
            
          ]
        }
      ]
    }
  ]
}
